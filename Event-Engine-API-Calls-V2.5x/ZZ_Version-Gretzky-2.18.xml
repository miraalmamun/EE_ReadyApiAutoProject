<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="db5ca8a5-7bf8-41bb-b8b2-ab9ea0f9edbb" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="ZZ_Version Gretzky 2.18" searchProperties="true" timeout="0" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="db5ca8a5-7bf8-41bb-b8b2-ab9ea0f9edbbfileName">ZZ_Version-Gretzky-2.18</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="manualTestStep" name="Using Admin UI - Add Spotify URL to an existing event" id="62287d91-cdf2-4f08-96dc-b32fa4aa628c"><con:description>
Step 1. Go to Admin UI Event Page 
Step 2. Search for Billiy Joel Event and Select the Most Future Billiy Joel event 
Step 3. Add Spotify partner venue logo URL "https://upload.wikimedia.org/wikipedia/commons/2/26/Spotify_logo_with_text.svg"  to this event 
Step 4. Also Add some Social Tag Like #facebook &amp; #twitter


Hit the next event/eventid &amp; Event All endpoint and see it has the below object 
"spotify_playlist_url" : "https://upload.wikimedia.org/wikipedia/commons/2/26/Spotify_logo_with_text.svg",

"spotify_playlist_url" : "https://upload.wikimedia.org/wikipedia/commons/2/26/Spotify_logo_with_text.svg",</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="restrequest" name="Get Event/EventID" id="34c21308-1dce-47f2-9896-ffcfb3d17286"><con:settings/><con:config service="Event Engine" methodName="v2_events_id" resourcePath="/v2.5/events/{event_id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Event/EventID" id="4097ce26-7750-45c6-bf2a-1d076bedb577" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer cd9a70efa41013af89909eb70fb4d528" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://api.msg.com</con:endpoint><con:request/><con:originalUri>http://qa-api.msg.com/v2.5/events</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d291110d-fc3d-4992-bdb6-657304d4aacd"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Valid Result is Not Empty - > Result []" id="a3779633-5eb5-42d6-a0dd-2a461c624137"><con:configuration><scriptText>import groovy.json.JsonSlurper

//grab the response
	def ResponseMessage = messageExchange.response.responseContent

//define a JsonSlurper
	def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)

//Get A Targeted Array Item from Response 
	def result = jsonSlurper.results
	log.info result.size

	def totalelement = result.size
	
	//def Events_With_Arts_and_theater_Category = 0


	//category.each //Loop Through the Targeted Array Item 	
	//{
		//log.info it.name.toString()
		//def value = it.name.toString()
		//if(value.contains('Arts&amp;Theater'))
		//{
			//Events_With_Arts_and_theater_Category++
			//log.info it.name.toString()
		//}
	//}


	assert totalelement != 0 : "Result is Empty Result[]"</scriptText></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="8f467fd4-3efd-4664-be3e-b5ec01d2d660" name="Check for existence of [spotify_playlist_url]"><con:configuration><path>$['results'][0]['spotify_playlist_url']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d09527d0-0a6b-416c-a7b7-2d8ad6442fc7" name="Match content of [spotify_playlist_url]"><con:configuration><path>$['results'][0]['spotify_playlist_url']</path><content>https://upload.wikimedia.org/wikipedia/commons/2/26/Spotify_logo_with_text.svg</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="bed43456-9cae-47bf-9412-e5b9518db5f5" name="Check for existence of [social_tags]"><con:configuration><path>$['results'][*]['social_tags']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="db512b32-7f60-4980-8597-2c6e6ab94927" name="Match content of [social_tags]"><con:configuration><path>$['results'][0]['social_tags'][0]</path><content>#twitter</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="event_id" value="3B005352966C17E4" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:environmentSpec><con:entry environmentId="0cc57d55-fe2d-4aed-9711-a070dae089cb"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="1a094b1f-40e4-4c2f-9161-6d62005e215a"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="b695a608-4e04-4152-856c-6fc46423d14e"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="91bc2533-d754-4ed7-8bcb-6d204390b2af"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="9aceb8bd-5bce-4527-ba8b-5116011b2c2e"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="2f76bc83-fd85-49f5-9bce-1261dc2b8119"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="2f3aa2fe-e2c5-41f6-a34e-040213a1f4e4"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="4bbf54a9-beeb-4393-bb8f-61e363c47665"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="77e0122f-3006-45cd-ba4e-9a9d4472d12a"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Event All" id="6fc9496b-c6a8-42a9-838b-2429a60d2b36"><con:settings/><con:config service="Event Engine" methodName="v2_5_events_all" resourcePath="/v2.5/events" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Event All" id="4097ce26-7750-45c6-bf2a-1d076bedb577" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer e0554a52bf12b176ae14a9f85b60fcb2" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qa-api.msg.com</con:endpoint><con:request/><con:originalUri>http://qa-api.msg.com/v2.5/events</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="18d105f8-52d8-44d1-9026-7a87a4e1dd5c" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d8546cb1-a42f-4a8f-9920-b7879a47e1ff" name="Match content of [status]"><con:configuration><path>$['status']</path><content>Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Valid Result is Not Empty - > Result []" id="619a109e-d82d-4a1a-8236-5d3de9d41464"><con:configuration><scriptText>import groovy.json.JsonSlurper

//grab the response
	def ResponseMessage = messageExchange.response.responseContent

//define a JsonSlurper
	def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)

//Get A Targeted Array Item from Response 
	def result = jsonSlurper.results
	log.info result.size

	def totalelement = result.size
	
	//def Events_With_Arts_and_theater_Category = 0


	//category.each //Loop Through the Targeted Array Item 	
	//{
		//log.info it.name.toString()
		//def value = it.name.toString()
		//if(value.contains('Arts&amp;Theater'))
		//{
			//Events_With_Arts_and_theater_Category++
			//log.info it.name.toString()
		//}
	//}


	assert totalelement != 0 : "Result is Empty Result[]"</scriptText></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [spotify_playlist_url]" id="9fe6c1a0-bf9c-4d6f-8be4-b16a9d317597"><con:configuration><path>$['results'][*]['spotify_playlist_url']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Looking Partner Venue Events in All Event Collection" id="2d8dddb2-f498-42b1-b2d3-340db1ebadca"><con:configuration><scriptText>import groovy.json.JsonSlurper

//grab the response
	def ResponseMessage = messageExchange.response.responseContent

//define a JsonSlurper
	def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)

//Get A Targeted Array Item from Response 
	def partnerName = jsonSlurper.results.partnership_info.name.toString()
	def partneURL = jsonSlurper.results.partnership_info.logo_url.toString()
	def partnerLegalCopy = jsonSlurper.results.partnership_info.legalCopy.toString()
	//def partnerLegalCopy = "Welcome to Netflix! We are a subscription service that provides our members with access to motion pictures, television and other audio-visual entertainment (\"Netflix content\") streamed over the Internet to certain Internet-connected TV's, computers and other devices (\"Netflix ready devices\")."


	log.info partnerName
	log.info partneURL
	log.info partnerLegalCopy
	
	def isFail = false
	def fildescription

	if(!partnerName.contains('Netflix'))
	{
		isFail = true
		fildescription = "Partner Venue Name Not Found"
	}

	else if(!partneURL.contains('Netflix_2015_logo.svg'))
	{
		isFail = true
		fildescription = "Partner Venue URL Not Found"
	}


	else if(!partnerLegalCopy.contains('Welcome to Netflix'))
	{
		isFail = true
		fildescription = "Partner Venue Legal Copy  Not Found"
	}


	assert isFail == false : fildescription

</scriptText></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" name="Check for existence of [social_tags]" id="55e978f4-a63a-44fe-837d-4afc73ccb4c5"><con:configuration><path>$['results'][*]['social_tags']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="size" value="1000"/>
  <con:entry key="availability_percentage" value=""/>
</con:parameters><con:parameterOrder><con:entry>artist_id</con:entry><con:entry>category</con:entry><con:entry>city</con:entry><con:entry>day_type</con:entry><con:entry>end_date</con:entry><con:entry>group</con:entry><con:entry>lat</con:entry><con:entry>long</con:entry><con:entry>min_price</con:entry><con:entry>max_price</con:entry><con:entry>name</con:entry><con:entry>promo_code</con:entry><con:entry>page</con:entry><con:entry>promotion</con:entry><con:entry>radius</con:entry><con:entry>start_date</con:entry><con:entry>sales_status</con:entry><con:entry>sales_start_date</con:entry><con:entry>sales_end_date</con:entry><con:entry>sort_by</con:entry><con:entry>size</con:entry><con:entry>sub_category</con:entry><con:entry>status</con:entry><con:entry>tag</con:entry><con:entry>unit</con:entry><con:entry>venue_id</con:entry><con:entry>venue</con:entry><con:entry>availability_percentage</con:entry><con:entry>created_after</con:entry></con:parameterOrder><con:environmentSpec><con:entry environmentId="0cc57d55-fe2d-4aed-9711-a070dae089cb"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="1a094b1f-40e4-4c2f-9161-6d62005e215a"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="b695a608-4e04-4152-856c-6fc46423d14e"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="91bc2533-d754-4ed7-8bcb-6d204390b2af"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="9aceb8bd-5bce-4527-ba8b-5116011b2c2e"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="2f76bc83-fd85-49f5-9bce-1261dc2b8119"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="2f3aa2fe-e2c5-41f6-a34e-040213a1f4e4"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="4bbf54a9-beeb-4393-bb8f-61e363c47665"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="77e0122f-3006-45cd-ba4e-9a9d4472d12a"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>6fc9496b-c6a8-42a9-838b-2429a60d2b36</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34c21308-1dce-47f2-9896-ffcfb3d17286</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62287d91-cdf2-4f08-96dc-b32fa4aa628c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>